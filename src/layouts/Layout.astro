---
import '../styles/global.css';
--- 

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>EdenBlood Dev PortFolio</title>
	</head>

	<body class="bg-black text-white relative">
		<div class="texture">
			<div class="texture-child">
			</div>
		</div>
		<div class="container-main">
			<slot />
		</div>

	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const observer = new IntersectionObserver((entries, obs) => {
				entries.forEach(entry => {
					if(entry.isIntersecting) {
						const parent = entry.target
						parent.classList.add('opacity-100', 'translate-y-0')
						parent.classList.remove('opacity-0', 'translate-y-8')
						
						const children = parent.querySelectorAll('.reveal-child')
						children.forEach(child => {
							child.classList.add('opacity-100', 'translate-y-0')
							child.classList.remove('opacity-0', 'translate-y-8')
						})
						obs.unobserve(parent);
					}
				});
			}, {
				threshold: 0.25
			})

			const elements = document.querySelectorAll('.reveal');
			elements.forEach(element => {
				element.classList.add('opacity-0', 'translate-y-8','transition-all', 'duration-1000', 'ease-out');

				const children = element.querySelectorAll('reveal-child');
				children.forEach(child => {
					child.classList.add('opacity-0', 'translate-y-8','transition-all', 'duration-1000', 'ease-out')
				})

				observer.observe(element);
			})
		})
	</script>
	</body>
</html>

<style is:global>
	@import "tailwindcss";

	html,
	body {
		margin: 0;
		padding: 0;
		font-family: "Outfit", system-ui, -apple-system, sans-serif;
	}
	*, *:before, *:after {
		box-sizing: inherit;
	}
	html {
		box-sizing: border-box;
	}
	.container-main {
		width: min(95%, 64rem);
		margin: 0 auto;
	}
  @media (min-width: 1380px) {
    .container-main {
      width: 74rem;
    }
      
  }

  .texture {
    flex: none;
    height: 100%;
    left: 0;
    pointer-events: none;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 10;
  }
  .texture-child {
    width:100%;
    height:100%;
    background-size:161px;
    background-repeat: repeat;
    background-image:url('/Noise.png');
    opacity:0.04;
    border-radius:0
  }
  section {
    padding: 5vh 0;
  }
  section:first-of-type {
    padding-top: 0;
  }
  section:last-of-type {
    padding-bottom: 0;
  }

  .animate-fade-in-down {
    animation: fade-in-down 1s ease-out forwards;
  }
  
  .arrow {
    transition: transform 0.5s ease;
  }
  
  .btn:hover .arrow {
    transform: translateX(1rem);
  }
  
  @keyframes fade-in-down {
    0% {
      opacity: 0;
      transform: translateY(2rem);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-100%);
    }
  }
  
  /* Slice Bar */
  .slide-container {
    overflow: hidden;
    white-space: nowrap;
    background-color: #1e1e1e;
    padding: 1rem 0;
  }
  .slider-container:hover .slide-track {
    animation-play-state: paused;
  }
  .slider {
    display:flex;
    align-items: center;
    height: 100%;
  }
  .slide-track {
    display: flex;
    width: max-content;
    animation: scroll 12s linear infinite;
  }
  .slide {
    flex: 0 0 auto;
    padding: 0 2rem;
    font-size: 1.25rem;
    color: white;
  }

	@theme {
		--color-gray-card: rgb(39, 40, 41);
	}
  
	@font-face {
		font-family: "Outfit";
		src: url("../assets/fonts/Outfit/Outfit-VariableFont_wght.ttf");
	}
</style>